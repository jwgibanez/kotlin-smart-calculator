type: edu
custom_name: Error!
files:
- name: src/calculator/Main.kt
  visible: true
  text: "package calculator\n\nimport java.util.*\n\nfun main() {\n    val scanner\
    \ = Scanner(System.`in`)\n    while (true) {\n        when (val input = scanner.nextLine())\
    \ {\n            \"/exit\" -> {\n                println(\"Bye!\")\n         \
    \       return\n            }\n            \"/help\" -> {\n                println(\n\
    \                    \"\"\"\n                        The program calculates expressions\
    \ like these: 4 + 6 - 8, 2 - 3 - 4, and\n                        so on. It supports\
    \ both unary and binary minus operators. If the user\n                       \
    \ has entered several same operators following each other, the program still\n\
    \                        works (like Java or Python REPL).\n                 \
    \       \n                        Consider that the even number of minuses gives\
    \ a plus, and the odd number\n                        of minuses gives a minus!\
    \ For example: 2 -- 2 equals 2 - (-2) equals 2 + 2.\n                    \"\"\"\
    .trimIndent())\n            }\n            else -> {\n                if (input.trim()\
    \ == \"\") {\n                    continue\n                } else if (input.contains(\"\
    \ \")) {\n                    var operation = \"+\"\n                    println(input.split(\"\
    \ \").sumOf {\n                        var hasNoDigit = true\n               \
    \         for (i in it) {\n                            if (i.isDigit()) {\n  \
    \                              hasNoDigit = false\n                          \
    \      break\n                            }\n                        }\n     \
    \                   when {\n                            (it.contains(\"-\") ||\
    \ it.contains(\"+\"))\n                                    && hasNoDigit -> {\n\
    \                                var op = it\n                               \
    \ while (op.length != 1) {\n                                    op = op.replace(\"\
    --\", \"+\")\n                                        .replace(\"++\", \"+\")\n\
    \                                        .replace(\"+-\", \"-\")\n           \
    \                             .replace(\"-+\", \"-\")\n                      \
    \          }\n                                operation = op\n               \
    \                 0\n                            }\n                         \
    \   else -> {\n                                if (operation == \"-\") {\n   \
    \                                 val int = \"$operation$it\"\n              \
    \                      operation = \"+\"\n                                   \
    \ int.toInt()\n                                } else {\n                    \
    \                it.toInt()\n                                }\n             \
    \               }\n                        }\n                    })\n       \
    \         } else {\n                    println(input)\n                }\n  \
    \          }\n        }\n    }\n}\n"
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {

                    TestedProgram main = new TestedProgram();

                    // The base test suit that checks if the program
                    // correctly responses to the commands and can stop
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // The test suit that checks functionality of the previous steps
                    main.start();

                    // sum of positive numbers
                    String output = main.execute("7 + 1 + 4").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong("The program cannot sum more than two numbers.");
                    }

                    // sum mixed numbers & negative answer
                    output = main.execute("23 - 17 - 13").trim();
                    if (!output.equals("-7")) {
                        return CheckResult.wrong(
                            "Incorrect sum of positive and negative numbers.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 21 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The program cannot process a large number of numbers.");
                    }

                    // input one number
                    output = main.execute("101").trim();
                    if (!output.equals("101")) {
                        return CheckResult.wrong(
                            "The program printed not the same number that was entered " +
                            "(when one number is entered it is a valid expression).");
                    }

                    // input one negative number
                    output = main.execute("-302").trim();
                    if (!output.equals("-302")) {
                        return CheckResult.wrong(
                            "The program printed not the same number that was entered.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("10 - 7 - 3").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A set of positive tests for this step
                    main.start();

                    // tests of invalid expressions
                    String output = main.execute("123+").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program cannot process an invalid expression.");
                    }

                    output = main.execute("321-").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program cannot process an invalid expression.");
                    }

                    // input one number with plus in front of it
                    output = main.execute("+7").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program not correctly processes useless plus sign.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A set of negative tests for this step
                    main.start();

                    // test of entering not numbers
                    String output = main.execute("abc").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program should print \"Invalid expression\" " +
                            "when not a numbers are entered");
                    }

                    output = main.execute("one + two + three").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program should print \"Invalid expression\" " +
                            "when not a numbers are entered.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/go").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/88/stages/490/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 20 Sep 2021 06:45:37 UTC
record: 5
